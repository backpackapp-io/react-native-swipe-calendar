{"version":3,"sources":["Day.tsx"],"names":["DayWrapper","React","memo","date","isInDisplayedMonth","dateFormatted","isActive","dateRef","memoDate","current","selectedDate","onDateSelect","DayComponent","theme","markingType","markedDates","isSelected","isToday","Date","onDateSelectRef","onDateSelectCb","options","offset","getTimezoneOffset","newDateString","getTime","toISOString","split","markedDate","DayItem","dayText","deselectedColor","dayFontColor","dayInactiveFontColor","color","daySelectedFontColor","flags","padding","leftFillerStyle","rightFillerStyle","containerStyle","textStyle","style","Object","keys","length","startingDay","endingDay","selected","textColor","backgroundColor","flex","justifyContent","alignItems","flexDirection","position","top","bottom","left","right","aspectRatio","selectedDayBackgroundColor","borderRadius","margin","fontSize","dayFontSize","fontFamily","dayFontFamily","width","height","todayIndicatorDotColor"],"mappings":"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","sourcesContent":["import React, { useCallback, useMemo, useRef } from \"react\";\nimport { Text, TouchableOpacity, View } from \"react-native\";\nimport { format, isSameDay } from \"date-fns\";\nimport { DayProps, DayWrapperProps, OnDateSelect } from \"./types\";\nimport { useCalendarContext } from \"./context\";\n\n// The calendar renders a lot of Days, so we wrap them in order to\n// prevent context updates from re-rendering everything\n\nexport const DayWrapper = React.memo(\n  ({ date, isInDisplayedMonth, dateFormatted, isActive }: DayWrapperProps) => {\n    const dateRef = useRef(date);\n    const memoDate = useMemo(() => {\n      if (isSameDay(dateRef.current, date)) {\n        return dateRef.current;\n      } else {\n        dateRef.current = date;\n        return date;\n      }\n    }, [date]);\n\n    const {\n      selectedDate,\n      onDateSelect,\n      DayComponent,\n      theme,\n      markingType,\n      markedDates,\n    } = useCalendarContext();\n    const isSelected = useMemo(() => {\n      return !!selectedDate && isSameDay(memoDate, selectedDate);\n    }, [memoDate, selectedDate]);\n    const isToday = useMemo(() => isSameDay(memoDate, new Date()), [memoDate]);\n    const onDateSelectRef = useRef(onDateSelect);\n    onDateSelectRef.current = onDateSelect;\n    const onDateSelectCb: OnDateSelect = useCallback((date, options) => {\n      return onDateSelectRef.current?.(date, options);\n    }, []);\n\n    const offset = memoDate.getTimezoneOffset();\n    const newDateString = new Date(memoDate.getTime() - offset * 60 * 1000)\n      .toISOString()\n      .split(\"T\")[0];\n\n    const markedDate =\n      markingType === \"period\" ? markedDates?.[newDateString] ?? {} : {};\n\n    return (\n      <DayItem\n        date={memoDate}\n        isActive={isActive}\n        dateFormatted={dateFormatted}\n        isSelected={isSelected}\n        isToday={isToday}\n        isInDisplayedMonth={isInDisplayedMonth}\n        DayComponent={DayComponent}\n        onDateSelect={onDateSelectCb}\n        theme={theme}\n        markedDate={markedDate}\n      />\n    );\n  }\n);\n\nexport const DayItem = React.memo(\n  ({\n    date,\n    isInDisplayedMonth,\n    isSelected,\n    DayComponent,\n    isToday,\n    onDateSelect,\n    theme,\n    dateFormatted,\n    isActive,\n    markedDate,\n  }: DayProps) => {\n    const dayText = format(date, \"d\");\n    const deselectedColor = isInDisplayedMonth\n      ? theme.dayFontColor\n      : theme.dayInactiveFontColor;\n\n    const color = isSelected ? theme.daySelectedFontColor : deselectedColor;\n\n    const flags = markedDate;\n\n    if (DayComponent) {\n      return (\n        <DayComponent\n          date={date}\n          isInDisplayedMonth={isInDisplayedMonth}\n          isSelected={isSelected}\n          isToday={isToday}\n        />\n      );\n    }\n\n    const padding = 10;\n\n    let leftFillerStyle = {};\n    let rightFillerStyle = {};\n\n    let containerStyle = {};\n    let textStyle = {};\n    let style = {};\n\n    if (Object.keys(markedDate ?? {}).length !== 0) {\n      if (\n        (markedDate.startingDay && !markedDate.endingDay) ||\n        markedDate.selected\n      ) {\n        textStyle = {\n          color: markedDate.textColor,\n        };\n\n        containerStyle = {\n          backgroundColor: markedDate.color,\n        };\n\n        rightFillerStyle = {\n          backgroundColor: markedDate.backgroundColor,\n        };\n      } else if (!markedDate.startingDay && markedDate.endingDay) {\n        textStyle = {\n          color: markedDate.textColor,\n        };\n\n        containerStyle = {\n          backgroundColor: markedDate.color,\n        };\n\n        leftFillerStyle = {\n          backgroundColor: markedDate.backgroundColor,\n        };\n      } else {\n        textStyle = {\n          color: markedDate.textColor,\n        };\n        style = {\n          backgroundColor: markedDate.color,\n        };\n      }\n    }\n\n    return (\n      <TouchableOpacity\n        testID={`react-native-swipe-calendar:${dateFormatted}${\n          isInDisplayedMonth ? \"\" : \":isInDisplayedMonth:false\"\n        }`}\n        onPress={() => onDateSelect?.(date, { isSelected, isActive })}\n        style={[\n          {\n            flex: 1,\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            flexDirection: \"row\",\n            padding,\n          },\n          style,\n        ]}\n      >\n        <View\n          style={{\n            position: \"absolute\",\n            top: 0,\n            bottom: 0,\n            flexDirection: \"row\",\n            left: 0,\n            right: 0,\n          }}\n        >\n          <View style={[{ flex: 1 }, leftFillerStyle]} />\n          <View style={[{ flex: 1 }, rightFillerStyle]} />\n        </View>\n        <View\n          style={[\n            {\n              flex: 0,\n              aspectRatio: 1,\n              position: \"absolute\",\n              top: 0,\n              bottom: 0,\n              backgroundColor: isSelected\n                ? theme.selectedDayBackgroundColor\n                : \"transparent\",\n              borderRadius: 8,\n              margin: 2,\n            },\n            containerStyle,\n          ]}\n        />\n        <Text\n          style={[\n            {\n              color,\n              fontSize: theme.dayFontSize,\n              fontFamily: theme.dayFontFamily,\n            },\n            textStyle,\n          ]}\n        >\n          {dayText}\n        </Text>\n        <View\n          style={{\n            position: \"absolute\",\n            width: 5,\n            height: 5,\n            bottom: padding / 2,\n            borderRadius: 5,\n            backgroundColor: isToday\n              ? theme.todayIndicatorDotColor\n              : \"transparent\",\n          }}\n        />\n      </TouchableOpacity>\n    );\n  }\n);\n"]}