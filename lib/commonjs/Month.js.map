{"version":3,"sources":["Month.tsx"],"names":["MonthPage","React","memo","index","isActive","referenceDate","HeaderComponent","DayLabelComponent","theme","firstDayOfMonth","setDate","lastDayOfMo","headerText","headerDateFormat","weekStarts","start","end","weeks","map","week","alignItems","fontSize","headerFontSize","fontFamily","headerFontFamily","color","headerFontColor","textTransform","headerTextTransform","styles","row","dayLabelRow","day","dayLabelText","dayLabelDateFormat","toISOString","dayLabelContainer","dayLabelColor","dayLabelFontFamily","dayLabelFontSize","dayLabelTextTransform","flex","daysInWeek","weekContainer","sameMonth","dayDateFormatted","StyleSheet","create","flexDirection","justifyContent","paddingVertical"],"mappings":"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","sourcesContent":["import {\n  addDays,\n  addMonths,\n  eachDayOfInterval,\n  eachWeekOfInterval,\n  format,\n  isSameMonth,\n  lastDayOfMonth,\n} from \"date-fns\";\nimport React, { useMemo } from \"react\";\nimport { StyleSheet, Text, View } from \"react-native\";\nimport { useCalendarContext } from \"./context\";\nimport { DayWrapper } from \"./Day\";\n\nexport const MonthPage = React.memo(({ index, isActive }: { index: number, isActive:boolean }) => {\n  const { referenceDate, HeaderComponent, DayLabelComponent, theme } =\n    useCalendarContext();\n  const firstDayOfMonth = useMemo(\n    () => addMonths(referenceDate, index),\n    [referenceDate, index]\n  );\n  firstDayOfMonth.setDate(1);\n  const lastDayOfMo = useMemo(\n    () => lastDayOfMonth(firstDayOfMonth),\n    [firstDayOfMonth]\n  );\n  const headerText = format(firstDayOfMonth, theme.headerDateFormat);\n  const weekStarts = useMemo(\n    () =>\n      eachWeekOfInterval({\n        start: firstDayOfMonth,\n        end: lastDayOfMo,\n      }),\n    [firstDayOfMonth, lastDayOfMo]\n  );\n\n  const weeks = useMemo(\n    () =>\n      weekStarts.map((week) => {\n        return eachDayOfInterval({ start: week, end: addDays(week, 6) });\n      }),\n    [weekStarts]\n  );\n\n  return (\n    <View>\n      {HeaderComponent ? (\n        <HeaderComponent date={firstDayOfMonth} />\n      ) : (\n        <View style={{ alignItems: \"center\" }}>\n          <Text\n            style={{\n              fontSize: theme.headerFontSize,\n              fontFamily: theme.headerFontFamily,\n              color: theme.headerFontColor,\n              textTransform: theme.headerTextTransform,\n            }}\n          >\n            {headerText}\n          </Text>\n        </View>\n      )}\n      <View style={styles.row}>\n        <View style={styles.dayLabelRow}>\n          {weeks[0].map((day) => {\n            const dayLabelText = format(day, theme.dayLabelDateFormat);\n\n            return DayLabelComponent ? (\n              <DayLabelComponent date={day} />\n            ) : (\n              <View\n                key={`day-label-${day.toISOString()}`}\n                style={styles.dayLabelContainer}\n              >\n                <Text\n                  style={{\n                    color: theme.dayLabelColor,\n                    fontFamily: theme.dayLabelFontFamily,\n                    fontSize: theme.dayLabelFontSize,\n                    textTransform: theme.dayLabelTextTransform,\n                  }}\n                >\n                  {dayLabelText}\n                </Text>\n              </View>\n            );\n          })}\n        </View>\n      </View>\n      <View style={styles.row}>\n        <View style={styles.flex}>\n          {weeks.map((daysInWeek) => {\n            return (\n              <View\n                key={`week-${daysInWeek[0]?.toISOString()}`}\n                style={styles.weekContainer}\n              >\n                {daysInWeek.map((day) => {\n                  const sameMonth = isSameMonth(day, firstDayOfMonth);\n                  const dayDateFormatted = format(day, \"yyyy-MM-dd\");\n                  return (\n                    <DayWrapper\n                      key={dayDateFormatted}\n                      isInDisplayedMonth={sameMonth}\n                      date={day}\n                      dateFormatted={dayDateFormatted}\n                      isActive={isActive}\n                    />\n                  );\n                })}\n              </View>\n            );\n          })}\n        </View>\n      </View>\n    </View>\n  );\n});\n\nconst styles = StyleSheet.create({\n  flex: { flex: 1 },\n  row: { flexDirection: \"row\" },\n  dayLabelContainer: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  weekContainer: {\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n  },\n  dayLabelRow: {\n    flex: 1,\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    paddingVertical: 10,\n  },\n});\n"]}