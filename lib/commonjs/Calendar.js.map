{"version":3,"sources":["Calendar.tsx"],"names":["Calendar","ref","selectedDate","onDateSelect","onMonthChange","currentDate","HeaderComponent","DayLabelComponent","DayComponent","theme","monthBuffer","minDate","maxDate","pageInterpolator","defaultPageInterpolator","simultaneousHandlers","monthAnimCallbackNode","gesturesDisabled","animationConfig","markedDates","markingType","initialDateRef","Date","pagerRef","currentDateRef","currentPageRef","pageCallbackNode","minPageIndex","Infinity","current","maxPageIndex","onMonthChangeRef","fullThemeObj","DEFAULT_THEME","fullThemeRef","fullTheme","updatedTheme","incrementMonth","options","animated","incrementPage","decrementMonth","decrementPage","setMonth","date","page","setPage","onPageChange","pg","currentMonth","setDate","providerValue","referenceDate","pageInterpolatorInternal","params","Object","assign","MonthPage","undefined","getMonth","AnimUpdater","initialMonthIndex","rawVal","value","modVal","React","memo","forwardRef"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useImperativeHandle, useMemo, useRef } from \"react\";\nimport { addMonths, differenceInCalendarMonths, isSameMonth } from \"date-fns\";\nimport { isEqual } from \"lodash\";\nimport InfinitePager, { InfinitePagerImperativeApi, PageInterpolatorParams } from \"react-native-infinite-pager\";\nimport { DEFAULT_THEME, defaultPageInterpolator } from \"./defaults\";\nimport { CalendarImperativeApi, CalendarProps, ImperativeApiOptions } from \"./types\";\nimport { CalendarContext } from \"./context\";\nimport { MonthPage } from \"./Month\";\nimport Animated, { useDerivedValue, useSharedValue } from \"react-native-reanimated\";\n\nfunction Calendar(\n    {\n        selectedDate,\n        onDateSelect,\n        onMonthChange,\n        currentDate,\n        HeaderComponent,\n        DayLabelComponent,\n        DayComponent,\n        theme = {},\n        monthBuffer = 1,\n        minDate,\n        maxDate,\n        pageInterpolator = defaultPageInterpolator,\n        simultaneousHandlers,\n        monthAnimCallbackNode,\n        gesturesDisabled,\n        animationConfig,\n        markedDates,\n        markingType\n    }: CalendarProps,\n    ref: React.ForwardedRef<CalendarImperativeApi>\n) {\n    const initialDateRef = useRef(currentDate || new Date());\n    const pagerRef = useRef<InfinitePagerImperativeApi>(null);\n    const currentDateRef = useRef(currentDate);\n    const currentPageRef = useRef(0);\n\n    const pageCallbackNode = useSharedValue(0);\n\n    const minPageIndex = useMemo(() => {\n        if (!minDate) return -Infinity;\n        return differenceInCalendarMonths(initialDateRef.current, minDate) * -1;\n    }, [minDate]);\n\n    const maxPageIndex = useMemo(() => {\n        if (!maxDate) return Infinity;\n        return differenceInCalendarMonths(initialDateRef.current, maxDate) * -1;\n    }, [maxDate]);\n\n    const onMonthChangeRef = useRef(onMonthChange);\n    onMonthChangeRef.current = onMonthChange;\n\n    const fullThemeObj = {\n        ...DEFAULT_THEME,\n        ...theme\n    };\n    const fullThemeRef = useRef(fullThemeObj);\n\n    const fullTheme: typeof DEFAULT_THEME = useMemo(() => {\n        const updatedTheme = { ...DEFAULT_THEME, ...theme };\n        // If the theme object is defined inline, we only want to trigger context updates\n        // if the values contained actually change.\n        if (isEqual(fullThemeRef.current, updatedTheme)) {\n            return fullThemeRef.current;\n        } else {\n            fullThemeRef.current = updatedTheme;\n            return updatedTheme;\n        }\n    }, [theme]);\n\n    useImperativeHandle(\n        ref,\n        () => ({\n            incrementMonth: (options?: ImperativeApiOptions) => {\n                const animated = options?.animated ?? true;\n                pagerRef.current?.incrementPage({ animated });\n            },\n            decrementMonth: (options?: ImperativeApiOptions) => {\n                const animated = options?.animated ?? true;\n                pagerRef.current?.decrementPage({ animated });\n            },\n            setMonth: (date: Date, options?: ImperativeApiOptions) => {\n                const animated = options?.animated ?? false;\n                const page = differenceInCalendarMonths(date, initialDateRef.current);\n                pagerRef.current?.setPage(page, { animated });\n            }\n        }),\n        []\n    );\n\n    useEffect(() => {\n        // Hard set the page if the passed-in currentDate changes and the calendar isn't already displaying that month.\n        if (\n            currentDate &&\n            currentDateRef.current &&\n            !isSameMonth(currentDate, currentDateRef.current)\n        ) {\n            const page = differenceInCalendarMonths(\n                currentDate,\n                initialDateRef.current\n            );\n            if (page === currentPageRef.current) return;\n            pagerRef.current?.setPage(page, { animated: false });\n        }\n\n        currentDateRef.current = currentDate;\n    }, [currentDate]);\n\n    const onPageChange = useCallback((pg: number) => {\n        currentPageRef.current = pg;\n        const currentMonth = addMonths(initialDateRef.current, pg);\n        currentMonth.setDate(1);\n        onMonthChangeRef.current?.(currentMonth);\n    }, []);\n\n    const providerValue = useMemo(\n        () => ({\n            referenceDate: initialDateRef.current,\n            selectedDate,\n            onDateSelect,\n            HeaderComponent,\n            DayLabelComponent,\n            DayComponent,\n            theme: fullTheme,\n            pageInterpolator,\n            markedDates,\n            markingType\n        }),\n        [\n            selectedDate,\n            onDateSelect,\n            HeaderComponent,\n            DayLabelComponent,\n            DayComponent,\n            fullTheme,\n            pageInterpolator,\n            markedDates,\n            markingType\n        ]\n    );\n\n    const pageInterpolatorInternal = useCallback(\n        (params: PageInterpolatorParams) => {\n            \"worklet\";\n            return pageInterpolator(Object.assign({}, params, { theme: fullTheme }));\n        },\n        [fullTheme, pageInterpolator]\n    );\n\n    return (\n        <CalendarContext.Provider value={providerValue}>\n            <InfinitePager\n                ref={pagerRef}\n                PageComponent={MonthPage}\n                pageBuffer={monthBuffer}\n                onPageChange={onPageChange}\n                minIndex={minPageIndex}\n                maxIndex={maxPageIndex}\n                pageInterpolator={pageInterpolatorInternal}\n                simultaneousHandlers={simultaneousHandlers}\n                pageCallbackNode={monthAnimCallbackNode ? pageCallbackNode : undefined}\n                gesturesDisabled={gesturesDisabled}\n                animationConfig={animationConfig}\n            />\n            {monthAnimCallbackNode && (\n                <AnimUpdater\n                    initialMonthIndex={initialDateRef.current.getMonth()}\n                    monthAnimCallbackNode={monthAnimCallbackNode}\n                    pageCallbackNode={pageCallbackNode}\n                />\n            )}\n        </CalendarContext.Provider>\n    );\n}\n\n// Separate updater component so we only take the (slight) performance hit if the user provides a callback node\nfunction AnimUpdater({\n                         initialMonthIndex,\n                         pageCallbackNode,\n                         monthAnimCallbackNode\n                     }: {\n    initialMonthIndex: number;\n    pageCallbackNode: Animated.SharedValue<number>;\n    monthAnimCallbackNode: Animated.SharedValue<number>;\n}) {\n    useDerivedValue(() => {\n        const rawVal = pageCallbackNode.value + initialMonthIndex;\n        let modVal = rawVal % 12;\n        if (modVal < 0) {\n            modVal = 12 + modVal;\n        }\n        monthAnimCallbackNode.value = modVal;\n    }, [pageCallbackNode, initialMonthIndex]);\n\n    return null;\n}\n\nexport default React.memo(React.forwardRef(Calendar));\n"]}